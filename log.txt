Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/naveen/.local/lib/python3.11/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/f1e731ce8dc844baad28bd44d63b949c-pulp.mps threads 16 timeMode elapsed branch printingOptions all solution /tmp/f1e731ce8dc844baad28bd44d63b949c-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 85 COLUMNS
At line 1886 RHS
At line 1967 BOUNDS
At line 2028 ENDATA
Problem MODEL has 80 rows, 60 columns and 1680 elements
Coin0008I MODEL read with 0 errors
threads was changed from 0 to 16
Option for timeMode changed from cpu to elapsed
Continuous objective value is 0.000201642 - 0.00 seconds
Cgl0004I processed model has 80 rows, 60 columns (40 integer (40 of which binary)) and 1680 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 19 integers unsatisfied sum - 0.000201642
Cbc0038I Pass   1: suminf.    0.00020 (19) obj. 0.000201642 iterations 0
Cbc0038I Pass   2: suminf.    0.00020 (19) obj. 0.000201642 iterations 0
Cbc0038I Pass   3: suminf.    0.00013 (10) obj. 7.00013 iterations 37
Cbc0038I Pass   4: suminf.    0.00013 (10) obj. 7.00013 iterations 0
Cbc0038I Pass   5: suminf.    0.00013 (10) obj. 7.00013 iterations 0
Cbc0038I Pass   6: suminf.    0.00004 (3) obj. 17 iterations 30
Cbc0038I Pass   7: suminf.    0.00004 (3) obj. 17 iterations 0
Cbc0038I Pass   8: suminf.    0.00004 (3) obj. 17 iterations 0
Cbc0038I Pass   9: suminf.    0.00003 (2) obj. 18 iterations 11
Cbc0038I Pass  10: suminf.    0.00003 (2) obj. 18 iterations 0
Cbc0038I Pass  11: suminf.    0.00003 (2) obj. 18 iterations 0
Cbc0038I Pass  12: suminf.    0.00003 (1) obj. 19 iterations 16
Cbc0038I Pass  13: suminf.    0.00003 (1) obj. 19 iterations 0
Cbc0038I Pass  14: suminf.    0.00003 (1) obj. 19 iterations 0
Cbc0038I Pass  15: suminf.    0.00000 (0) obj. 22 iterations 12
Cbc0038I Solution found of 22
Cbc0038I Relaxing continuous gives 22
Cbc0038I Rounding solution of 17 is better than previous of 22

Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 80 rows 60 columns, reduced to 76 rows 56 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I Round again with cutoff of 14.4001
Cbc0038I Pass  16: suminf.    0.00020 (19) obj. 0.000201642 iterations 0
Cbc0038I Pass  17: suminf.    0.00020 (19) obj. 0.000201642 iterations 0
Cbc0038I Pass  18: suminf.    0.40011 (6) obj. 14.4001 iterations 69
Cbc0038I Pass  19: suminf.    0.00010 (6) obj. 14.0001 iterations 8
Cbc0038I Pass  20: suminf.    0.00010 (6) obj. 14.0001 iterations 0
Cbc0038I Pass  21: suminf.    0.40011 (6) obj. 14.4001 iterations 20
Cbc0038I Pass  22: suminf.    0.00007 (4) obj. 14.0001 iterations 7
Cbc0038I Pass  23: suminf.    0.00007 (4) obj. 14.0001 iterations 0
Cbc0038I Pass  24: suminf.    0.40011 (6) obj. 14.4001 iterations 17
Cbc0038I Pass  25: suminf.    0.00007 (6) obj. 14.0001 iterations 6
Cbc0038I Pass  26: suminf.    0.00007 (6) obj. 14.0001 iterations 0
Cbc0038I Pass  27: suminf.    0.40011 (6) obj. 14.4001 iterations 9
Cbc0038I Pass  28: suminf.    0.00009 (6) obj. 14.0001 iterations 6
Cbc0038I Pass  29: suminf.    0.00009 (6) obj. 14.0001 iterations 0
Cbc0038I Pass  30: suminf.    0.00006 (8) obj. 12.0001 iterations 23
Cbc0038I Pass  31: suminf.    0.00006 (8) obj. 12.0001 iterations 0
Cbc0038I Pass  32: suminf.    0.00006 (8) obj. 12.0001 iterations 0
Cbc0038I Pass  33: suminf.    0.00009 (8) obj. 12.0001 iterations 8
Cbc0038I Pass  34: suminf.    0.00009 (8) obj. 12.0001 iterations 0
Cbc0038I Pass  35: suminf.    0.00009 (8) obj. 12.0001 iterations 0
Cbc0038I Pass  36: suminf.    0.40011 (6) obj. 14.4001 iterations 16
Cbc0038I Pass  37: suminf.    0.00008 (6) obj. 14.0001 iterations 4
Cbc0038I Pass  38: suminf.    0.00008 (6) obj. 14.0001 iterations 0
Cbc0038I Pass  39: suminf.    0.40011 (6) obj. 14.4001 iterations 14
Cbc0038I Pass  40: suminf.    0.00006 (6) obj. 14.0001 iterations 5
Cbc0038I Pass  41: suminf.    0.00006 (6) obj. 14.0001 iterations 0
Cbc0038I Pass  42: suminf.    0.40011 (6) obj. 14.4001 iterations 7
Cbc0038I Pass  43: suminf.    0.00004 (5) obj. 14 iterations 4
Cbc0038I Pass  44: suminf.    0.00004 (5) obj. 14 iterations 0
Cbc0038I Pass  45: suminf.    0.40011 (5) obj. 14.4001 iterations 16
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 80 rows 60 columns, reduced to 79 rows 59 columns
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I After 0.14 seconds - Feasibility pump exiting with objective of 17 - took 0.13 seconds
Cbc0012I Integer solution of 20 found by DiveCoefficient after 0 iterations and 0 nodes (0.14 seconds)
Cbc0038I Full problem 80 rows 60 columns, reduced to 60 rows 40 columns
Cbc0013I At root node, 0 cuts changed objective from 0.00020164189 to 0.00020164189 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 20 best solution, best possible 0.00020164189 (0.16 seconds)
Cbc0010I After 1000 nodes, 478 on tree, 20 best solution, best possible 0.00040515064 (0.63 seconds)
Cbc0010I After 2000 nodes, 949 on tree, 20 best solution, best possible 0.00040515064 (0.74 seconds)
Cbc0010I After 3000 nodes, 1315 on tree, 20 best solution, best possible 0.00040515064 (0.84 seconds)
Cbc0010I After 4000 nodes, 1814 on tree, 20 best solution, best possible 0.00040515064 (0.95 seconds)
Cbc0010I After 5000 nodes, 2305 on tree, 20 best solution, best possible 0.00040515064 (1.04 seconds)
Cbc0010I After 6000 nodes, 2784 on tree, 20 best solution, best possible 0.00040515064 (1.13 seconds)
Cbc0010I After 7000 nodes, 3257 on tree, 20 best solution, best possible 0.00040515064 (1.24 seconds)
Cbc0010I After 8000 nodes, 3720 on tree, 20 best solution, best possible 0.00040515064 (1.33 seconds)
Cbc0010I After 9000 nodes, 4185 on tree, 20 best solution, best possible 0.00040515064 (1.41 seconds)
Cbc0010I After 10000 nodes, 4603 on tree, 20 best solution, best possible 0.00040515064 (1.50 seconds)
Cbc0010I After 11000 nodes, 5014 on tree, 20 best solution, best possible 0.00040515064 (1.59 seconds)
Cbc0010I After 12000 nodes, 5507 on tree, 20 best solution, best possible 2.0004791 (1.81 seconds)
Cbc0010I After 13000 nodes, 5946 on tree, 20 best solution, best possible 3.0002094 (2.04 seconds)
Cbc0010I After 14000 nodes, 6440 on tree, 20 best solution, best possible 3.0002532 (2.24 seconds)
Cbc0010I After 15000 nodes, 6937 on tree, 20 best solution, best possible 3.0003186 (2.37 seconds)
Cbc0010I After 16000 nodes, 7435 on tree, 20 best solution, best possible 3.0003854 (2.47 seconds)
Cbc0010I After 17000 nodes, 7929 on tree, 20 best solution, best possible 3.0004634 (2.55 seconds)
Cbc0010I After 18000 nodes, 8394 on tree, 20 best solution, best possible 3.0004881 (2.71 seconds)
Cbc0010I After 19000 nodes, 8871 on tree, 20 best solution, best possible 3.000617 (2.78 seconds)
Cbc0010I After 20000 nodes, 9326 on tree, 20 best solution, best possible 3.0008157 (2.85 seconds)
Cbc0010I After 21000 nodes, 9753 on tree, 20 best solution, best possible 3.0011399 (2.91 seconds)
Cbc0010I After 22000 nodes, 10117 on tree, 20 best solution, best possible 3.0011631 (3.03 seconds)
Cbc0010I After 23000 nodes, 10481 on tree, 20 best solution, best possible 3.0011631 (3.09 seconds)
Cbc0010I After 24000 nodes, 10808 on tree, 20 best solution, best possible 3.0011631 (3.15 seconds)
Cbc0010I After 25000 nodes, 10806 on tree, 20 best solution, best possible 3.0011631 (3.32 seconds)
Cbc0010I After 26000 nodes, 11081 on tree, 20 best solution, best possible 3.0035075 (3.57 seconds)
Cbc0010I After 27000 nodes, 11300 on tree, 20 best solution, best possible 3.0091722 (3.90 seconds)
Cbc0010I After 28000 nodes, 11610 on tree, 20 best solution, best possible 3.0995217 (4.23 seconds)
Cbc0010I After 29000 nodes, 11634 on tree, 20 best solution, best possible 3.0995217 (4.29 seconds)
Cbc0010I After 30000 nodes, 12099 on tree, 20 best solution, best possible 4.0001913 (4.50 seconds)
Cbc0010I After 31000 nodes, 12597 on tree, 20 best solution, best possible 4.0002042 (4.66 seconds)
Cbc0010I After 32000 nodes, 13096 on tree, 20 best solution, best possible 4.0002182 (4.80 seconds)
Cbc0010I After 33000 nodes, 13092 on tree, 20 best solution, best possible 4.0002184 (4.86 seconds)
Cbc0010I After 34000 nodes, 13579 on tree, 20 best solution, best possible 4.0002317 (4.98 seconds)
Cbc0010I After 35000 nodes, 14077 on tree, 20 best solution, best possible 4.000238 (5.15 seconds)
Cbc0010I After 36000 nodes, 14574 on tree, 20 best solution, best possible 4.0002481 (5.28 seconds)
Cbc0010I After 37000 nodes, 14591 on tree, 20 best solution, best possible 4.0002482 (5.36 seconds)
Cbc0010I After 38000 nodes, 15087 on tree, 20 best solution, best possible 4.0002576 (5.46 seconds)
Cbc0030I Thread 0 used 2544 times,  waiting to start 1.3707564,  12659 locks, 0.070138454 locked, 0.49221826 waiting for locks
Cbc0030I Thread 1 used 2513 times,  waiting to start 1.6977892,  12539 locks, 0.054404259 locked, 0.49799514 waiting for locks
Cbc0030I Thread 2 used 2484 times,  waiting to start 1.649554,  12393 locks, 0.076955557 locked, 0.52278304 waiting for locks
Cbc0030I Thread 3 used 2359 times,  waiting to start 1.6497111,  11766 locks, 0.064903975 locked, 0.53998041 waiting for locks
Cbc0030I Thread 4 used 2456 times,  waiting to start 1.6312299,  12260 locks, 0.057872295 locked, 0.52386403 waiting for locks
Cbc0030I Thread 5 used 2450 times,  waiting to start 1.7631416,  12240 locks, 0.054616928 locked, 0.43243647 waiting for locks
Cbc0030I Thread 6 used 2454 times,  waiting to start 1.6732073,  12229 locks, 0.048403025 locked, 0.49255848 waiting for locks
Cbc0030I Thread 7 used 2342 times,  waiting to start 1.6777532,  11705 locks, 0.053801775 locked, 0.51124883 waiting for locks
Cbc0030I Thread 8 used 2485 times,  waiting to start 1.7222068,  12412 locks, 0.062188864 locked, 0.42967916 waiting for locks
Cbc0030I Thread 9 used 2400 times,  waiting to start 1.6623359,  12052 locks, 0.049919605 locked, 0.47314215 waiting for locks
Cbc0030I Thread 10 used 2601 times,  waiting to start 1.9434714,  12946 locks, 0.06673789 locked, 0.46301699 waiting for locks
Cbc0030I Thread 11 used 2295 times,  waiting to start 1.7772009,  11471 locks, 0.058854818 locked, 0.45093632 waiting for locks
Cbc0030I Thread 12 used 2348 times,  waiting to start 1.9251366,  11781 locks, 0.056162119 locked, 0.46048045 waiting for locks
Cbc0030I Thread 13 used 2377 times,  waiting to start 1.8567932,  11863 locks, 0.057318687 locked, 0.44644284 waiting for locks
Cbc0030I Thread 14 used 2246 times,  waiting to start 1.826478,  11268 locks, 0.053415298 locked, 0.44022989 waiting for locks
Cbc0030I Thread 15 used 2303 times,  waiting to start 1.8947897,  11529 locks, 0.053951502 locked, 0.44417095 waiting for locks
Cbc0030I Main thread 4.0152373 waiting for threads,  77394 locks, 0.045043468 locked, 0.9136889 waiting for locks
Cbc0027I Exiting on user event
Cbc0005I Partial search - best objective 20 (best possible 4.0002576), took 215856 iterations and 38642 nodes (5.62 seconds)
Cbc0032I Strong branching done 41724 times (173153 iterations), fathomed 170 nodes and fixed 4794 variables
Cbc0035I Maximum depth 39, 0 variables fixed on reduced cost
Cuts at root node changed objective from 0.000201642 to 0.000201642
Probing was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Gomory was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Knapsack was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
FlowCover was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 17 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - User ctrl-cuser ctrl-c

Objective value:                20.00000000
Lower bound:                    4.000
Gap:                            4.00
Enumerated nodes:               38642
Total iterations:               215856
Time (CPU seconds):             40.04
Time (Wallclock seconds):       5.62

Option for printingOptions changed from normal to all
Total time (CPU seconds):       40.04   (Wallclock seconds):       5.62

